import { createReducer, on } from '@ngrx/store';
import { <%= featureClassName %>SearchActions } from './<%= featureFileName %>-search.actions';
import { <%= featureClassName %>SearchState } from './<%= featureFileName %>-search.state';
import { <%= featureClassName %>SearchCriteria } from './<%= featureFileName %>-search.parameters';
import { <%= featurePropertyName %>SearchColumns } from './<%= featureFileName %>-search.columns';
import {
  routerNavigatedAction,
  RouterNavigatedAction,
} from '@ngrx/router-store';
import { <%= featurePropertyName %>SearchCriteriasSchema } from './timeslot-group-search.parameters';

export const initialState: <%= featureClassName %>SearchState = {
  columns: <%= featurePropertyName %>SearchColumns,
  results: [],    
  displayedColumns: null,
  viewMode: 'basic',
  chartVisible: false,
  criteria: {},
};

export const <%= featurePropertyName %>SearchReducer = createReducer(
  initialState,
  on(
    routerNavigatedAction,
    (state: <%= featureClassName %>SearchState, action: RouterNavigatedAction) => {
      const results = <%= featurePropertyName %>SearchCriteriasSchema.safeParse(
        action.payload.routerState.root.queryParams,
      );
      if (results.success) {
        return {
          ...state,
          criteria: results.data,
          searchLoadingIndicator:
            Object.keys(action.payload.routerState.root.queryParams).length !=
            0,
        };
      }
      return state;
    },
  ),
  on(
    <%= featureClassName %>SearchActions.resetButtonClicked,
    (state: <%= featureClassName %>SearchState): <%= featureClassName %>SearchState => ({
      ...state,
      results: initialState.results,
      criteria: {},
    })
  ),
  on(
     <%= featureClassName %>SearchActions.searchButtonClicked,    
    (
      state:  <%= featureClassName %>SearchState,
      { searchCriteria },
    ):  <%= featureClassName %>SearchState => ({
      ...state,
      searchLoadingIndicator: true,
      criteria: searchCriteria,
    }),
  ),
  on(
    <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsReceived,
    (
      state: <%= featureClassName %>SearchState,
      { results }
    ): <%= featureClassName %>SearchState => ({
      ...state,
      results,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed,
    (state: <%= featureClassName %>SearchState): <%= featureClassName %>SearchState => ({
      ...state,
      results: [],
    })
  ), 
  on(
    <%= featureClassName %>SearchActions.chartVisibilityRehydrated,
    (
      state: <%= featureClassName %>SearchState,
      { visible }
    ): <%= featureClassName %>SearchState => ({
      ...state,
      chartVisible: visible,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.chartVisibilityToggled,
    (
      state: <%= featureClassName %>SearchState,
    ): <%= featureClassName %>SearchState => ({
      ...state,
      chartVisible: !state.chartVisible,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.viewModeChanged,
    (
      state: <%= featureClassName %>SearchState,
      { viewMode }
    ): <%= featureClassName %>SearchState => ({
      ...state,
      viewMode: viewMode,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.displayedColumnsChanged,
    (state: <%= featureClassName %>SearchState, { displayedColumns }): <%= featureClassName %>SearchState => ({
      ...state,
      displayedColumns: displayedColumns.map((v) => v.id),
    })
  )
);
