import { createReducer, on } from '@ngrx/store';
import { <%= featureClassName %>SearchActions } from './<%= featureFileName %>-search.actions';
import { <%= featureClassName %>SearchState } from './<%= featureFileName %>-search.state';
import { <%= featureClassName %>SearchCriteria } from './<%= featureFileName %>-search.parameters';
import { <%= featurePropertyName %>SearchColumns } from './<%= featureFileName %>-search.columns';

export const initialState: <%= featureClassName %>SearchState = {
  columns: <%= featurePropertyName %>SearchColumns,
  results: [],    
  displayedColumns: null,
  viewMode: 'basic',
  chartVisible: false,  
};

export const <%= featurePropertyName %>SearchReducer = createReducer(
  initialState,
  on(
    <%= featureClassName %>SearchActions.resetButtonClicked,
    (state: <%= featureClassName %>SearchState): <%= featureClassName %>SearchState => ({
      ...state,
      results: initialState.results,      
    })
  ),
  on(
    <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsReceived,
    (
      state: <%= featureClassName %>SearchState,
      { results }
    ): <%= featureClassName %>SearchState => ({
      ...state,
      results,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed,
    (state: <%= featureClassName %>SearchState): <%= featureClassName %>SearchState => ({
      ...state,
      results: [],
    })
  ), 
  on(
    <%= featureClassName %>SearchActions.chartVisibilityRehydrated,
    (
      state: <%= featureClassName %>SearchState,
      { visible }
    ): <%= featureClassName %>SearchState => ({
      ...state,
      chartVisible: visible,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.chartVisibilityToggled,
    (
      state: <%= featureClassName %>SearchState,
    ): <%= featureClassName %>SearchState => ({
      ...state,
      chartVisible: !state.chartVisible,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.viewModeChanged,
    (
      state: <%= featureClassName %>SearchState,
      { viewMode }
    ): <%= featureClassName %>SearchState => ({
      ...state,
      viewMode: viewMode,
    })
  ),
  on(
    <%= featureClassName %>SearchActions.displayedColumnsChanged,
    (state: <%= featureClassName %>SearchState, { displayedColumns }): <%= featureClassName %>SearchState => ({
      ...state,
      displayedColumns: displayedColumns.map((v) => v.id),
    })
  )
);
