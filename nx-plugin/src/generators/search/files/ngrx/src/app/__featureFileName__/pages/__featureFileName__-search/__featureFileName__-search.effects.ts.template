import { ActivatedRoute, Router, RoutesRecognized } from '@angular/router';
import { Actions, createEffect, ofType, concatLatestFrom } from '@ngrx/effects';
import { routerNavigatedAction } from '@ngrx/router-store';
import { catchError, map, mergeMap, of, switchMap, tap, filter, mergeMap } from 'rxjs';
import {  
  <%= serviceName %>, 
} from '../../../shared/generated';
import { <%= featureClassName %>SearchActions } from './<%= featureFileName %>-search.actions';
import { <%= featureClassName %>SearchComponent } from './<%= featureFileName %>-search.component';
import { ExportDataService, PortalMessageService } from '@onecx/portal-integration-angular';
import {
  createQueryParamsEffect,
  filterForNavigatedTo,
  filterOutOnlyQueryParamsChanged,
  filterOutQueryParamsHaveNotChanged,
} from '@onecx/portal-integration-angular/ngrx';
import {  
  <%= featurePropertyName %>SearchCriteriasSchema,
} from './<%= featureFileName %>-search.parameters';
import { Injectable, SkipSelf } from '@angular/core';
import { 
  <%= featurePropertyName %>SearchSelectors, 
  select<%= featureClassName %>SearchViewModel, 
  selectSearchCriteria 
} from './<%= featureFileName %>-search.selectors';
import { Action, Store } from '@ngrx/store';
@Injectable()
export class <%= featureClassName %>SearchEffects {
  constructor(
    private actions$: Actions,
    @SkipSelf() private route: ActivatedRoute,
    private <%= featurePropertyName %>Service: <%= serviceName %>,    
    private router: Router,
    private store: Store,
    private messageService: PortalMessageService,  
    private readonly exportDataService: ExportDataService
  ) {}

  resetButtonClicked$ = createQueryParamsEffect(
    this.actions$,
    <%= featureClassName %>SearchActions.resetButtonClicked,
    this.router,
    this.route,
    () => ({})
  );
  
  searchButtonClicked$ = createQueryParamsEffect(
    this.actions$,
    <%= featureClassName %>SearchActions.searchButtonClicked,
    this.router,
    this.route,
    (state, action) => ({
      ...state,
      ...action.searchCriteria,
      //TODO: Move to docs to explain how to only put the date part in the URL in case you have date and not datetime
      //exampleDate: action.searchCriteria.exampleDate?.slice(0, 10) 
    })
  );

  searchByUrl$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(routerNavigatedAction),
      filterForNavigatedTo(this.router, <%= featureClassName %>SearchComponent),
      filterOutQueryParamsHaveNotChanged(this.router, <%= featurePropertyName %>SearchCriteriasSchema, false),
      concatLatestFrom(() => this.store.select(selectSearchCriteria)),
      switchMap(([,searchCriteria]) => this.performSearch(searchCriteria))
    );
  });

  performSearch(searchCriteria: Record<string, any>) {
    return this.<%= featurePropertyName %>Service.search<%= dataObjectName %>s(searchCriteria).pipe(
          map(({ results, totalNumberOfResults }) =>
            <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsReceived(
              {
                results,
                totalNumberOfResults,
              }
            )
          ),
          catchError((error) =>
            of(
              <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed(
                {
                  error,
                }
              )
            )
          )
        )
  }

  rehydrateChartVisibility$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(routerNavigatedAction),
      filterForNavigatedTo(this.router, <%= featureClassName %>SearchComponent),
      filterOutOnlyQueryParamsChanged(this.router),
      map(() => <%= featureClassName %>SearchActions.chartVisibilityRehydrated({
          visible: localStorage.getItem('<%= featurePropertyName %>ChartVisibility') === 'true',
        })
      )
    )
  });

  saveChartVisibility$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= featureClassName %>SearchActions.chartVisibilityToggled),
      concatLatestFrom(() => this.store.select(<%= featurePropertyName %>SearchSelectors.selectChartVisible)),
      tap(([,chartVisible]) => {
          localStorage.setItem('<%= featurePropertyName %>ChartVisibility',String(chartVisible));
      })
    )
  }, {dispatch: false});

  exportData$ = createEffect(
    () => {
      return this.actions$.pipe(
        ofType(<%= featureClassName %>SearchActions.chartVisibilityToggled),
        concatLatestFrom(() =>
          this.store.select(select<%= featureClassName %>SearchViewModel)
        ),
        map(([, viewModel]) => {
          this.exportDataService.exportCsv(
            viewModel.displayedColumns,
            viewModel.results,
            '<%= featureClassName %>.csv'
          );
        })
      );
    },
    { dispatch: false }
  );

  errorMessages: { action: Action; key: string }[] = [
    {
      action:
        <%= featureClassName %>SearchActions.<%= featurePropertyName %>SearchResultsLoadingFailed,
      key: '<%= featureConstantName %>_SEARCH.ERROR_MESSAGES.SEARCH_RESULTS_LOADING_FAILED',
    }
  ];

  displayError$ = createEffect(
    () => {
      return this.actions$.pipe(
        tap((action) => {
          const e = this.errorMessages.find(
            (e) => e.action.type === action.type
          );
          if (e) {
            this.messageService.error({ summaryKey: e.key });
          }
        })
      );
    },
    { dispatch: false }
  );
}
