import {
  Component,
  EventEmitter,
  Input,
  OnChanges,
  OnInit,
} from '@angular/core';
import {
  Column,
  DialogButtonClicked,
  DialogPrimaryButtonDisabled,
  DialogResult,
  DialogState,
  PortalMessageService,
} from '@onecx/portal-integration-angular';

import { FormControl, FormGroup, Validators } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import {
  <%= createRequestName%>,
  <%= updateRequestName%>,  
  <%= dataObjectName%>,
  <%= serviceName%>,
} from 'src/app/shared/generated';

@Component({
  selector: 'app-<%= featureFileName %>-create-update',
  templateUrl: './<%= featureFileName %>-create-update.component.html',
  styleUrls: ['./<%= featureFileName %>-create-update.component.scss'],
})
export class <%= featureClassName%>CreateUpdateComponent 
  implements
    DialogPrimaryButtonDisabled,
    DialogResult<<%= createRequestName%> | <%= updateRequestName%>>,
    DialogButtonClicked<<%= featureClassName%>CreateUpdateComponent>,
    OnChanges {
  @Input() public dataItem: <%= dataObjectName%> | undefined;
  @Input() public changeMode = 'CREATE';

  // Form Definitions
  public formGroup: FormGroup;
  public columns: Column[] = [
    { field: 'changeMe', header: 'CHANGEME' },
  ];

  // Dialog Properties
  primaryButtonEnabled: EventEmitter<boolean> = new EventEmitter();
  dialogResult: <%= createRequestName%> | <%= updateRequestName%> = {};

  constructor() {
    this.formGroup = new FormGroup({
      changeMe: new FormControl(null, [Validators.maxLength(255)]),
    });
    this.formGroup.statusChanges.subscribe((status) => {
      if (status == 'VALID') {
        this.primaryButtonEnabled.emit(true);
      } else {
        this.primaryButtonEnabled.emit(false);
      }
    });
  }

  ocxDialogButtonClicked(): boolean | Observable<boolean> | Promise<boolean> | undefined {
    if (this.changeMode == 'CREATE') {
      this.dialogResult = this.formGroup.value;
    } else {
      this.dialogResult = {
        ...this.dataItem,
        ...this.formGroup.value,
      };
    }
    return undefined;
  }

  ngOnChanges() {
    if (this.dataItem) {
      this.formGroup.patchValue({
        ...this.dataItem,
      });
    } else {
      this.formGroup.reset();
    }
  }

}
