import {
  Component,
  EventEmitter,
  Input,
  OnInit,
} from '@angular/core';
import {
  Column,
  DialogButtonClicked,
  DialogPrimaryButtonDisabled,
  DialogResult,
  DialogState,
  PortalMessageService,
} from '@onecx/portal-integration-angular';

import { FormControl, FormGroup, Validators } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { Observable, map } from 'rxjs';
import {
  <%= createRequestName%>,
  <%= updateRequestName%>,  
  <%= dataObjectName%>,
  <%= serviceName%>,
} from 'src/app/shared/generated';

import { <%= featureClassName%>CreateUpdateViewModel } from './<%= featureFileName %>-create-update.viewmodel';


@Component({
  selector: 'app-<%= featureFileName %>-create-update',
  templateUrl: './<%= featureFileName %>-create-update.component.html',
  styleUrls: ['./<%= featureFileName %>-create-update.component.scss'],
})
export class <%= featureClassName%>CreateUpdateComponent 
  implements
    DialogPrimaryButtonDisabled,
    DialogResult<<%= dataObjectName %>>,
    DialogButtonClicked<<%= featureClassName%>CreateUpdateComponent>,
    OnInit {

  @Input() public vm: <%= featureClassName%>CreateUpdateViewModel = {
    toEditItem: undefined,
  };
  
  public formGroup: FormGroup;  
  
  primaryButtonEnabled: EventEmitter<boolean> = new EventEmitter();
  dialogResult: <%= dataObjectName %> = {};

  constructor() {
    this.formGroup = new FormGroup({
      changeMe: new FormControl(null, [Validators.maxLength(255)]),
      // ACTION C3: Add form fields
    });
    this.formGroup.statusChanges
      .pipe(
        map((status) => {
          return status === 'VALID';
        })
      )
      .subscribe(this.primaryButtonEnabled);
  }

  ocxDialogButtonClicked(): boolean | Observable<boolean> | Promise<boolean> | undefined {
    this.dialogResult = {
      ...this.vm.toEditItem,
      ...this.formGroup.value,
    };    
    return undefined;
  }

  ngOnInit() {
    if (this.vm.toEditItem) {
      this.formGroup.patchValue({
        ...this.vm.toEditItem,
      });
    } else {
      this.formGroup.reset();
    }
  }

}
